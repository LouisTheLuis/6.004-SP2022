1. Why does AND-ing with 0x00000001 tells us if the value is even or odd?

This is because all even numbers in binary end with a 0 bit while all odd numbers in binary end with a 1 bit. Thus, when applying the bitwise AND with 0x00000001 we will have that
for the resulting number: first, all the digits except for the last one will be zero (this is because 0 AND any number = 0); and second, the last bit will be 1 if the number ends
with a 1 and 0 if the number ends with a 0. Therefore, we will know that if the result ends with a 0 the number was even, and if it ends with a 1 the number was odd.

2. How could you modify this program so that it tests the Collatz conjecture?

After the end of the <Else> branch and before the last line of the <Then> branch I would add the following lines of code:

li a3, 1               // sets a3 equal to 1
bne a1, a3, If         // checks if a3 is not  equal to a1. If they are not equal, it branches to <If>

which would check if a1 is equal to 1 and branch to <If> if that's the case. This would keep the program running as long as a1 != 1.

3. In test 1, does the simulation branch to <Else> (the case when a0 is initially odd) or continue on to <Then> (the case when a0 is initially even)? How about in test 2?

In test 1, the simulation branches to <Else>, as the simulation stops when including the break point at address 10 (corresponding to the <Else> branch). In test 2 however it branches
to the <Then> branch.

4. How many instructions did you use to perform the swap of p[i] and p[i+1]? Can you do it with just two?

I used two instructions to perform the swap. Yes, it can be performed with just two, as it follows: once you have p[i] and p[i+1] in two variables in the register (for example, 
a1 = p[i] and a2 = p[i+1]), you can switch them by storing them in memory in their opposite addresses (using the same example, by storing a2 -> Mem[&a1] and a1 -> Mem[&a2]).
